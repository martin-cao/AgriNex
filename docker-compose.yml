# docker-compose.v2.yml
# AgriNex V2.0 完整部署配置
# 支持三层架构、MinIO对象存储、MySQL数据库

version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: agrinex-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: agrinex_root_password
      MYSQL_DATABASE: agrinex
      MYSQL_USER: agrinex_user
      MYSQL_PASSWORD: agrinex_password
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - agrinex-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 20s
      retries: 10

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    container_name: agrinex-minio
    restart: always
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DOMAIN: localhost
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - agrinex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: agrinex-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - agrinex-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MQTT 消息代理
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: agrinex-mosquitto
    restart: always
    ports:
      - "1883:1883"
      - "9011:9001"
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - agrinex-network
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "health_check"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AgriNex 后端 V2
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agrinex-backend
    restart: always
    environment:
      # Flask 配置
      FLASK_ENV: production
      SECRET_KEY: agrinex-production-secret-key-change-me
      
      # 数据库配置
      DATABASE_URL: mysql+pymysql://agrinex_user:agrinex_password@mysql:3306/agrinex
      
      # MinIO 配置
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_SECURE: "false"
      
      # Redis 配置
      REDIS_URL: redis://redis:6379/0
      
      # MQTT 配置
      MQTT_HOST: mosquitto
      MQTT_PORT: 1883
      
      # JWT 配置
      JWT_SECRET_KEY: jwt-production-secret-change-me
      JWT_ACCESS_TOKEN_EXPIRES: 900
      
      # 存储配置
      LOCAL_STORAGE_PATH: /app/storage
      
      # 其他配置
      PORT: 8000
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    volumes:
      - backend_storage:/app/storage
      - backend_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    networks:
      - agrinex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AgriNex 前端
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: agrinex-frontend
    restart: always
    environment:
      VUE_APP_API_BASE_URL: http://localhost:8000/api/v2
      VUE_APP_BACKEND_URL: http://backend:8000
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - agrinex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP 服务器
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: agrinex-mcp
    restart: always
    environment:
      DATABASE_URL: mysql+pymysql://agrinex_user:agrinex_password@mysql:3306/agrinex
      BACKEND_URL: http://backend:8000
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - mysql
    networks:
      - agrinex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 传感器模拟器
  sensor-simulator:
    build:
      context: ./sensor-client
      dockerfile: Dockerfile
    container_name: agrinex-sensor-simulator
    restart: always
    environment:
      MQTT_HOST: mosquitto
      MQTT_PORT: 1883
      BACKEND_URL: http://backend:8000/api/v2
      SIMULATION_INTERVAL: 30
      DEVICE_COUNT: 5
    depends_on:
      - backend
      - mosquitto
    networks:
      - agrinex-network

  # Nginx 负载均衡和反向代理
  nginx:
    image: nginx:alpine
    container_name: agrinex-nginx
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - agrinex-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  backend_storage:
    driver: local
  backend_logs:
    driver: local

networks:
  agrinex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
