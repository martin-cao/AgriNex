openapi: 3.0.3
info:
  title: AgriNex - Agricultural IoT Data Management Platform
  description: |
    AgriNex是一个农业物联网数据管理平台，采用三层架构：设备(Device) → 传感器(Sensor) → 读数(Reading)。
    
    核心功能：
    - 支持多类型传感器：数值型（温度、湿度、光照）、多媒体型（图片、视频）
    - MinIO对象存储集成：支持图片/视频文件的对象存储和本地备份
    - JWT认证系统：完整的用户注册登录系统
    - 告警管理：实时异常数据监控和告警
    - 预测分析：基于历史数据的预测功能
    - MCP服务：模型上下文协议集成
    
    API架构：
    - 主服务：平台信息、健康检查、API文档
    - 设备管理：完整的CRUD操作和统计分析
    - 传感器管理：传感器CRUD、读数管理、统计信息
    - 告警系统：告警列表、解决、统计
    - 预测服务：手动触发预测、获取预测结果
    - 用户认证：注册、登录、token刷新、用户信息
    - MCP服务：模型上下文协议相关接口
  version: 1.0.0
  contact:
    name: AgriNex Development Team
    email: dev@agrinex.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.agrinex.com
    description: Production server

tags:
  - name: Main
    description: 平台主要信息和健康检查
  - name: Authentication
    description: 用户认证相关接口
  - name: Devices
    description: 设备管理（支持三层架构）
  - name: Sensors
    description: 传感器管理（支持多种数据类型）
  - name: Alarms
    description: 告警管理系统
  - name: Predictions
    description: 数据预测和分析
  - name: MCP
    description: 模型上下文协议服务

security:
  - bearerAuth: []

paths:
  # Main endpoints
  /:
    get:
      tags: [Main]
      summary: 平台主页信息
      description: 获取AgriNex平台的基本信息和API端点列表
      security: []
      responses:
        '200':
          description: 平台信息
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "AgriNex - 农业物联网数据管理平台"
                  description:
                    type: string
                  features:
                    type: array
                    items:
                      type: string
                  endpoints:
                    type: object

  /api:
    get:
      tags: [Main]
      summary: API信息
      description: 获取API基本信息
      security: []
      responses:
        '200':
          description: API信息
          content:
            application/json:
              schema:
                type: object

  /api/docs:
    get:
      tags: [Main]
      summary: API文档
      description: 获取详细的API文档信息
      security: []
      responses:
        '200':
          description: API文档
          content:
            application/json:
              schema:
                type: object

  /api/health:
    get:
      tags: [Main]
      summary: 健康检查
      description: 检查API服务健康状态
      security: []
      responses:
        '200':
          description: 服务健康
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time

  /api/status:
    get:
      tags: [Main]
      summary: 系统状态
      description: 获取系统各组件状态（数据库、MinIO、本地存储）
      security: []
      responses:
        '200':
          description: 系统状态
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                  components:
                    type: object

  # Authentication endpoints
  /api/auth/login:
    post:
      tags: [Authentication]
      summary: 用户登录
      description: 使用用户名和密码登录，返回JWT令牌
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin123
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: 认证失败

  /api/auth/register:
    post:
      tags: [Authentication]
      summary: 用户注册
      description: 创建新用户账户
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  minLength: 3
                password:
                  type: string
                  minLength: 6
                role:
                  type: string
                  enum: [user, admin]
                  default: user
      responses:
        '201':
          description: 注册成功
        '400':
          description: 参数错误
        '409':
          description: 用户名已存在

  /api/auth/refresh:
    post:
      tags: [Authentication]
      summary: 刷新Token
      description: 使用refresh_token获取新的access_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Token刷新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string

  /api/auth/logout:
    post:
      tags: [Authentication]
      summary: 用户登出
      description: 撤销当前token
      responses:
        '200':
          description: 登出成功

  /api/auth/profile:
    get:
      tags: [Authentication]
      summary: 获取用户信息
      description: 获取当前登录用户的个人信息
      responses:
        '200':
          description: 用户信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Device endpoints
  /api/devices:
    get:
      tags: [Devices]
      summary: 获取设备列表
      description: 获取所有设备列表，支持分页和筛选
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, error]
      responses:
        '200':
          description: 设备列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Devices]
      summary: 创建设备
      description: 创建新的IoT设备
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                location:
                  type: string
                type:
                  type: string
                status:
                  type: string
                  default: active
      responses:
        '201':
          description: 设备创建成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Device'

  /api/devices/{device_id}:
    get:
      tags: [Devices]
      summary: 获取设备详情
      description: 获取指定设备的详细信息
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 设备详情
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Device'

    put:
      tags: [Devices]
      summary: 更新设备
      description: 更新设备信息
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                location:
                  type: string
                type:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: 更新成功

    delete:
      tags: [Devices]
      summary: 删除设备
      description: 删除指定设备
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 删除成功

  /api/devices/{device_id}/overview:
    get:
      tags: [Devices]
      summary: 设备概览
      description: 获取设备的综合概览信息
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 设备概览
          content:
            application/json:
              schema:
                type: object

  /api/devices/{device_id}/sensors:
    get:
      tags: [Devices]
      summary: 获取设备传感器
      description: 获取设备下的所有传感器
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 传感器列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Sensor'

    post:
      tags: [Devices]
      summary: 创建传感器
      description: 在设备下创建新传感器
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type]
              properties:
                type:
                  type: string
                name:
                  type: string
                unit:
                  type: string
                status:
                  type: string
                  default: active
      responses:
        '201':
          description: 传感器创建成功

  /api/devices/{device_id}/readings:
    get:
      tags: [Devices]
      summary: 获取设备读数
      description: 获取设备所有传感器的读数
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
        - name: data_type
          in: query
          schema:
            type: string
            enum: [numeric, image, video]
      responses:
        '200':
          description: 读数列表

  /api/devices/{device_id}/sensors/{sensor_id}/readings:
    post:
      tags: [Devices]
      summary: 创建传感器读数
      description: 为指定传感器创建新的读数记录
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data_type:
                  type: string
                  enum: [numeric, image, video]
                value:
                  type: number
                unit:
                  type: string
                file:
                  type: string
                  format: binary
                metadata:
                  type: string
      responses:
        '201':
          description: 读数创建成功

  /api/devices/readings/{reading_id}/download:
    get:
      tags: [Devices]
      summary: 下载文件读数
      description: 下载图片或视频类型的读数文件
      parameters:
        - name: reading_id
          in: path
          required: true
          schema:
            type: integer
        - name: thumbnail
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 文件下载成功
        '302':
          description: 重定向到预签名URL

  /api/devices/{device_id}/statistics:
    get:
      tags: [Devices]
      summary: 设备统计信息
      description: 获取设备的统计分析信息
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 统计信息

  /api/devices/{device_id}/health:
    get:
      tags: [Devices]
      summary: 设备健康状态
      description: 获取设备健康状态检查结果
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 健康状态

  # Sensor endpoints
  /api/sensors:
    get:
      tags: [Sensors]
      summary: 获取传感器列表
      description: 获取所有传感器列表
      responses:
        '200':
          description: 传感器列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Sensor'

  /api/sensors/{sensor_id}:
    get:
      tags: [Sensors]
      summary: 获取传感器详情
      description: 获取指定传感器的详细信息
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 传感器详情

  /api/sensors/{sensor_id}/readings:
    get:
      tags: [Sensors]
      summary: 获取传感器读数
      description: 获取指定传感器的读数列表
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
        - name: per_page
          in: query
          schema:
            type: integer
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: 读数列表

    post:
      tags: [Sensors]
      summary: 创建传感器读数
      description: 为传感器创建新的数值型读数
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [value]
              properties:
                value:
                  type: number
                unit:
                  type: string
                metadata:
                  type: object
      responses:
        '201':
          description: 读数创建成功

  /api/sensors/{sensor_id}/readings/latest:
    get:
      tags: [Sensors]
      summary: 获取最新读数
      description: 获取传感器的最新读数
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 最新读数

  /api/sensors/{sensor_id}/statistics:
    get:
      tags: [Sensors]
      summary: 传感器统计信息
      description: 获取传感器的统计分析信息
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 统计信息

  # Alarm endpoints
  /api/alarms:
    get:
      tags: [Alarms]
      summary: 获取告警列表
      description: 获取系统告警列表，支持筛选
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, resolved, all]
            default: active
        - name: severity
          in: query
          schema:
            type: string
            enum: [low, medium, high]
        - name: sensor_id
          in: query
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
        - name: per_page
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: 告警列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alarm'

  /api/alarms/{alarm_id}:
    get:
      tags: [Alarms]
      summary: 获取告警详情
      description: 获取指定告警的详细信息
      parameters:
        - name: alarm_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 告警详情

  /api/alarms/{alarm_id}/resolve:
    put:
      tags: [Alarms]
      summary: 解决告警
      description: 标记告警为已解决状态
      parameters:
        - name: alarm_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resolved_by:
                  type: string
      responses:
        '200':
          description: 告警已解决

  /api/alarms/sensors/{sensor_id}:
    get:
      tags: [Alarms]
      summary: 获取传感器告警
      description: 获取指定传感器的告警列表
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [active, resolved, all]
      responses:
        '200':
          description: 传感器告警列表

  /api/alarms/statistics:
    get:
      tags: [Alarms]
      summary: 告警统计信息
      description: 获取告警系统的统计信息
      responses:
        '200':
          description: 告警统计

  # Prediction endpoints
  /api/forecast/sensors/{sensor_id}:
    post:
      tags: [Predictions]
      summary: 触发预测
      description: 手动触发传感器数据预测
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '202':
          description: 预测任务已提交
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  sensor_id:
                    type: integer
                  status:
                    type: string

    get:
      tags: [Predictions]
      summary: 获取预测结果
      description: 获取传感器的预测结果列表
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
        - name: per_page
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: 预测结果列表

  /api/forecast/sensors/{sensor_id}/latest:
    get:
      tags: [Predictions]
      summary: 获取最新预测
      description: 获取传感器的最新预测结果（未来24小时）
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 最新预测结果

  # MCP endpoints
  /api/mcp/devices:
    get:
      tags: [MCP]
      summary: MCP获取设备列表
      description: MCP服务获取设备列表
      responses:
        '200':
          description: 设备列表

  /api/mcp/add:
    post:
      tags: [MCP]
      summary: MCP添加设备
      description: 通过MCP服务添加设备
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, location]
              properties:
                name:
                  type: string
                location:
                  type: string
                type:
                  type: string
      responses:
        '201':
          description: 设备添加成功

  /api/mcp/devices/{device_id}/sensors:
    get:
      tags: [MCP]
      summary: MCP获取设备传感器
      description: 通过MCP服务获取设备传感器
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 传感器列表

    post:
      tags: [MCP]
      summary: MCP添加传感器
      description: 通过MCP服务添加传感器
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type]
              properties:
                type:
                  type: string
                name:
                  type: string
                unit:
                  type: string
                status:
                  type: string
      responses:
        '201':
          description: 传感器添加成功

  /api/mcp/sensors/{sensor_id}/readings:
    get:
      tags: [MCP]
      summary: MCP获取传感器读数
      description: 通过MCP服务获取传感器读数
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 读数列表

    post:
      tags: [MCP]
      summary: MCP添加读数
      description: 通过MCP服务添加传感器读数
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [value]
              properties:
                timestamp:
                  type: string
                  format: date-time
                value:
                  type: number
      responses:
        '201':
          description: 读数添加成功

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 使用JWT Bearer token进行认证

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        role:
          type: string
          enum: [user, admin]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Device:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          type: string
        type:
          type: string
        status:
          type: string
          enum: [active, inactive, error]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Sensor:
      type: object
      properties:
        id:
          type: integer
        device_id:
          type: integer
        type:
          type: string
        name:
          type: string
        unit:
          type: string
        status:
          type: string
          enum: [active, inactive, error]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Reading:
      type: object
      properties:
        id:
          type: integer
        sensor_id:
          type: integer
        timestamp:
          type: string
          format: date-time
        data_type:
          type: string
          enum: [numeric, image, video]
        value:
          type: number
        unit:
          type: string
        file_path:
          type: string
        file_size:
          type: integer
        file_format:
          type: string
        storage_backend:
          type: string
        bucket_name:
          type: string
        object_key:
          type: string
        object_url:
          type: string
        metadata:
          type: object
        created_at:
          type: string
          format: date-time

    Alarm:
      type: object
      properties:
        id:
          type: integer
        sensor_id:
          type: integer
        alarm_type:
          type: string
        threshold_value:
          type: number
        actual_value:
          type: number
        severity:
          type: string
          enum: [low, medium, high]
        message:
          type: string
        status:
          type: string
          enum: [active, resolved]
        resolved_at:
          type: string
          format: date-time
        resolved_by:
          type: string
        created_at:
          type: string
          format: date-time

    Prediction:
      type: object
      properties:
        id:
          type: integer
        sensor_id:
          type: integer
        predict_ts:
          type: string
          format: date-time
        yhat:
          type: number
        yhat_lower:
          type: number
        yhat_upper:
          type: number
        metric_type:
          type: string
        generated_at:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
        pages:
          type: integer
        has_next:
          type: boolean
        has_prev:
          type: boolean

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        message:
          type: string

    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: object
